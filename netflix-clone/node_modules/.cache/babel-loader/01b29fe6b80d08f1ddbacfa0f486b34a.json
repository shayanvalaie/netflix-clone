{"ast":null,"code":"import _regeneratorRuntime from\"/Users/shayan/Desktop/Projects/react/netflixClone/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/shayan/Desktop/Projects/react/netflixClone/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/shayan/Desktop/Projects/react/netflixClone/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import axios from\"./axios\";import YouTube from\"react-youtube\";import movieTrailer from\"movie-trailer\";import\"./Row.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var base_url=\"https://image.tmdb.org/t/p/original\";function Row(_ref){var title=_ref.title,fetchUrl=_ref.fetchUrl,isLargeRow=_ref.isLargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),trailerUrl=_useState4[0],setTrailerUrl=_useState4[1];useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchUrl);case 2:request=_context.sent;setMovies(request.data.results);return _context.abrupt(\"return\",request);case 5:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[fetchUrl]);var opts={height:\"390\",width:\"99%\",playerVars:{autoplay:0}};var handleClick=function handleClick(movie){// console.table(movie?.title)\nif(trailerUrl){setTrailerUrl(\"\");}else{movieTrailer((movie===null||movie===void 0?void 0:movie.title)||\"\").then(function(url){var urlParams=new URLSearchParams(new URL(url).search);setTrailerUrl(urlParams.get(\"v\"));}).catch(function(error){return console.log(error);});}};return/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"h2\",{children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"row__posters\",children:movies.map(function(movie){return/*#__PURE__*/_jsx(\"img\",{onClick:function onClick(){return handleClick(movie);},className:\"row__poster \".concat(isLargeRow&&\"row__posterLarge\"),src:\"\".concat(base_url).concat(isLargeRow?movie.poster_path:movie.backdrop_path),alt:movie.name},movie.id);})}),/*#__PURE__*/_jsx(\"div\",{style:{padding:\"40px\"},children:trailerUrl&&/*#__PURE__*/_jsx(YouTube,{videoId:trailerUrl,opts:opts})})]});}export default Row;","map":{"version":3,"sources":["/Users/shayan/Desktop/Projects/react/netflixClone/netflix-clone/src/Row.js"],"names":["React","useState","useEffect","axios","YouTube","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","get","request","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","map","poster_path","backdrop_path","name","id","padding"],"mappings":"+hBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,MAAOC,CAAAA,YAAP,KAAyB,eAAzB,CACA,MAAO,WAAP,C,wFAEA,GAAMC,CAAAA,QAAQ,CAAG,qCAAjB,CAEA,QAASC,CAAAA,GAAT,MAA8C,IAA/BC,CAAAA,KAA+B,MAA/BA,KAA+B,CAAxBC,QAAwB,MAAxBA,QAAwB,CAAdC,UAAc,MAAdA,UAAc,CAC5C,cAA4BT,QAAQ,CAAC,EAAD,CAApC,wCAAOU,MAAP,eAAeC,SAAf,eACA,eAAoCX,QAAQ,CAAC,EAAD,CAA5C,yCAAOY,UAAP,eAAmBC,aAAnB,eAEAZ,SAAS,CAAC,UAAM,SACCa,CAAAA,SADD,qIACd,qKACwBZ,CAAAA,KAAK,CAACa,GAAN,CAAUP,QAAV,CADxB,QACQQ,OADR,eAEEL,SAAS,CAACK,OAAO,CAACC,IAAR,CAAaC,OAAd,CAAT,CAFF,gCAGSF,OAHT,wDADc,4CAMdF,SAAS,GACV,CAPQ,CAON,CAACN,QAAD,CAPM,CAAT,CASA,GAAMW,CAAAA,IAAI,CAAG,CACXC,MAAM,CAAE,KADG,CAEXC,KAAK,CAAE,KAFI,CAGXC,UAAU,CAAE,CACVC,QAAQ,CAAE,CADA,CAHD,CAAb,CAQA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAW,CAC7B;AACA,GAAIb,UAAJ,CAAgB,CACdC,aAAa,CAAC,EAAD,CAAb,CACD,CAFD,IAEO,CACLT,YAAY,CAAC,CAAAqB,KAAK,OAAL,EAAAA,KAAK,SAAL,QAAAA,KAAK,CAAElB,KAAP,GAAgB,EAAjB,CAAZ,CACGmB,IADH,CACQ,SAACC,GAAD,CAAS,CACb,GAAMC,CAAAA,SAAS,CAAG,GAAIC,CAAAA,eAAJ,CAAoB,GAAIC,CAAAA,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB,CACAlB,aAAa,CAACe,SAAS,CAACb,GAAV,CAAc,GAAd,CAAD,CAAb,CACD,CAJH,EAKGiB,KALH,CAKS,SAACC,KAAD,QAAWC,CAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAAX,EALT,EAMD,CACF,CAZD,CAcA,mBACE,aAAK,SAAS,CAAC,KAAf,wBACE,oBAAK1B,KAAL,EADF,cAEE,YAAK,SAAS,CAAC,cAAf,UAGGG,MAAM,CAAC0B,GAAP,CAAW,SAACX,KAAD,CAAW,CACrB,mBACE,YAEE,OAAO,CAAE,yBAAMD,CAAAA,WAAW,CAACC,KAAD,CAAjB,EAFX,CAGE,SAAS,uBAAiBhB,UAAU,EAAI,kBAA/B,CAHX,CAIE,GAAG,WAAKJ,QAAL,SACDI,UAAU,CAAGgB,KAAK,CAACY,WAAT,CAAuBZ,KAAK,CAACa,aADtC,CAJL,CAOE,GAAG,CAAEb,KAAK,CAACc,IAPb,EACOd,KAAK,CAACe,EADb,CADF,CAWD,CAZA,CAHH,EAFF,cAmBE,YAAK,KAAK,CAAE,CAAEC,OAAO,CAAE,MAAX,CAAZ,UACG7B,UAAU,eAAI,KAAC,OAAD,EAAS,OAAO,CAAEA,UAAlB,CAA8B,IAAI,CAAEO,IAApC,EADjB,EAnBF,GADF,CAyBD,CACD,cAAeb,CAAAA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nimport \"./Row.css\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  const opts = {\n    height: \"390\",\n    width: \"99%\",\n    playerVars: {\n      autoplay: 0,\n    },\n  };\n\n  const handleClick = (movie) => {\n    // console.table(movie?.title)\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie?.title || \"\")\n        .then((url) => {\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get(\"v\"));\n        })\n        .catch((error) => console.log(error));\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row__posters\">\n        {/* several row_posters(s) */}\n\n        {movies.map((movie) => {\n          return (\n            <img\n              key={movie.id}\n              onClick={() => handleClick(movie)}\n              className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n              src={`${base_url}${\n                isLargeRow ? movie.poster_path : movie.backdrop_path\n              }`}\n              alt={movie.name}\n            />\n          );\n        })}\n      </div>\n      <div style={{ padding: \"40px\" }}>\n        {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n      </div>\n    </div>\n  );\n}\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}