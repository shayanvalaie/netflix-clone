{"ast":null,"code":"var _jsxFileName = \"/Users/shayan/Desktop/Projects/react/netflixClone/netflix-clone/src/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from \"./axios\";\nimport './Row.css';\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    // if [], run once when row loads and dont run again\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      console.log(request.data.results);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get('v'));\n      }).catch(error => console.log(error));\n    }\n  };\n\n  console.log(movies);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opt: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/Users/shayan/Desktop/Projects/react/netflixClone/netflix-clone/src/Row.js"],"names":["React","useState","useEffect","axios","YouTube","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","console","log","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","map","poster_path","backdrop_path","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,YAAP,MAAyB,eAAzB;;AAGA,MAAMC,QAAQ,GAAG,sCAAjB;;AAEA,SAASC,GAAT,CAAa;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA;AAAnB,CAAb,EAA8C;AAAA;;AAC1C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,EAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,mBAAea,SAAf,GAA2B;AACzB,YAAMC,OAAO,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAUR,QAAV,CAAtB;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAYH,OAAO,CAACI,IAAR,CAAaC,OAAzB;AACAT,MAAAA,SAAS,CAACI,OAAO,CAACI,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOL,OAAP;AACD;;AACDD,IAAAA,SAAS;AACV,GATQ,EASN,CAACN,QAAD,CATM,CAAT;AAWA,QAAMa,IAAI,GAAG;AACTC,IAAAA,MAAM,EAAE,KADC;AAETC,IAAAA,KAAK,EAAE,MAFE;AAGTC,IAAAA,UAAU,EAAE;AACRC,MAAAA,QAAQ,EAAC;AADD;AAHH,GAAb;;AAQA,QAAMC,WAAW,GAAIC,KAAD,IAAW;AAC3B,QAAIf,UAAJ,EAAgB;AACZC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACH,KAFD,MAEO;AACHT,MAAAA,YAAY,CAAC,CAAAuB,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,IAAP,KAAe,EAAhB,CAAZ,CACGC,IADH,CACQC,GAAG,IAAI;AACX,cAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoB,IAAIC,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB;AACArB,QAAAA,aAAa,CAACkB,SAAS,CAACf,GAAV,CAAc,GAAd,CAAD,CAAb;AAEH,OALD,EAMCmB,KAND,CAMQC,KAAD,IAAWnB,OAAO,CAACC,GAAR,CAAYkB,KAAZ,CANlB;AAOH;AAEJ,GAbD;;AAeAnB,EAAAA,OAAO,CAACC,GAAR,CAAYR,MAAZ;AAIA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAA,gBAAKH;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAGI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBAGKG,MAAM,CAAC2B,GAAP,CAAWV,KAAK,iBACb;AAAoB,QAAA,OAAO,EAAE,MAAMD,WAAW,CAACC,KAAD,CAA9C;AAAuD,QAAA,SAAS,EAAG,eAAclB,UAAU,IAAI,kBAAmB,EAAlH;AAAqH,QAAA,GAAG,EAAG,GAAEJ,QAAS,GAAEI,UAAU,GAAGkB,KAAK,CAACW,WAAT,GAAuBX,KAAK,CAACY,aAAc,EAA7L;AAAgM,QAAA,GAAG,EAAEZ,KAAK,CAACC;AAA3M,SAAUD,KAAK,CAACa,EAAhB;AAAA;AAAA;AAAA;AAAA,cADH;AAHL;AAAA;AAAA;AAAA;AAAA,YAHJ,EAWK5B,UAAU,iBAAI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEA,UAAlB;AAA8B,MAAA,GAAG,EAAES;AAAnC;AAAA;AAAA;AAAA;AAAA,YAXnB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH;;GA/DQf,G;;KAAAA,G;AAiET,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from \"./axios\";\nimport './Row.css';\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\n\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n    useEffect(() => {\n      // if [], run once when row loads and dont run again\n      async function fetchData() {\n        const request = await axios.get(fetchUrl);\n        console.log(request.data.results);\n        setMovies(request.data.results);\n        return request;\n      }\n      fetchData();\n    }, [fetchUrl]);\n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {\n            autoplay:1,\n        },\n    };\n\n    const handleClick = (movie) => {\n        if (trailerUrl) {\n            setTrailerUrl(\"\");\n        } else {\n            movieTrailer(movie?.name || \"\" )\n              .then(url => {\n                const urlParams = new URLSearchParams(new URL(url).search);\n                setTrailerUrl(urlParams.get('v'));\n\n            })\n            .catch((error) => console.log(error));\n        }\n\n    }\n\n    console.log(movies);\n\n    \n\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2>\n\n            <div className=\"row__posters\">\n                { /* row posters */}\n\n                {movies.map(movie => (\n                    <img key={movie.id} onClick={() => handleClick(movie)} className={`row__poster ${isLargeRow && \"row__posterLarge\"}`} src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name}/>\n                ))}\n            </div>\n\n            {trailerUrl && <YouTube videoId={trailerUrl} opt={opts} />}\n\n        \n           \n\n\n            \n        </div>\n    )\n}\n\nexport default Row\n"]},"metadata":{},"sourceType":"module"}