{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","get","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","name","id","style","padding","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9b42830.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n});\n\ninstance.get('/foo-bar');\n\n// https://api.themoviedb.org/3/foo-bar\n\nexport default instance;","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nimport \"./Row.css\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  const opts = {\n    height: \"390\",\n    width: \"99%\",\n    playerVars: {\n      autoplay: 0,\n    },\n  };\n\n  const handleClick = (movie) => {\n    // console.table(movie?.title)\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie?.title || \"\")\n        .then((url) => {\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get(\"v\"));\n        })\n        .catch((error) => console.log(error));\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row__posters\">\n        {/* several row_posters(s) */}\n\n        {movies.map((movie) => {\n          return (\n            <img\n              key={movie.id}\n              onClick={() => handleClick(movie)}\n              className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n              src={`${base_url}${\n                isLargeRow ? movie.poster_path : movie.backdrop_path\n              }`}\n              alt={movie.name}\n            />\n          );\n        })}\n      </div>\n      <div style={{ padding: \"40px\" }}>\n        {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n      </div>\n    </div>\n  );\n}\nexport default Row;\n","const API_KEY = \"70a69f8248efc159118ceb1b7a50f5dd\";\n\nconst requests = {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n}\n\nexport default requests;","import React, { useState, useEffect } from 'react'\nimport axios from './axios';\nimport requests from './requests';\nimport './Banner.css';\n\nfunction Banner() {\n    const [movie, setMovie] = useState([]);\n\n    useEffect(() => {\n     async function fetchData() {\n       const request = await axios.get(requests.fetchNetflixOriginals);\n       setMovie(\n         request.data.results[\n           Math.floor(Math.random() * request.data.results.length -1)\n       ]\n     ); \n     return request;\n     }\n     fetchData();\n    }, []);\n    console.log(movie);\n\n    function truncate(str, n) {\n        return str?.length > n ? str.substr(0, n -1) + \"...\" :str;\n    }\n\n\n    return (\n        <header className=\"banner\"\n        style={{\n            backgroundSize: \"cover\",\n            backgroundImage: `url(\n                \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\n            )`,\n            backgroundPosition: \"center center\",\n        }}\n        >\n            <div className=\"banner__contents\">\n                \n            {/* Title */}\n            <h1 className=\"banner__title\">\n                {movie?.title || movie?.name || movie?.original_name}\n            </h1>\n\n            <div className=\"banner__buttons\">\n                <button className=\"banner__button\">Play</button>\n                <button className=\"banner__button\">My List</button>\n                \n            </div>\n            <h1 className=\"banner__description\">\n            {truncate(movie?.overview, 150)}\n            </h1>\n            \n                </div> \n            \n            <div className=\"banner--fadeBottom\" />\n            \n        </header>\n    )\n}\n\nexport default Banner\n","import React, { useState, useEffect } from \"react\";\nimport \"./Nav.css\";\n\nfunction Nav() {\n  const [show, handleShow] = useState(false);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      if (window.scrollY > 100) {\n        handleShow(true);\n      } else handleShow(false);\n    });\n    return () => {\n      window.removeEventListener(\"scroll\");\n    };\n  }, []);\n\n  return (\n    <div className={`nav ${show && \"nav__black\"} `}>\n      <img\n        className=\"nav__logo\"\n        src=\"https://www.freepnglogos.com/uploads/netflix-logo-text-emblem-31.png\"\n        alt=\"Netflix Logo\"\n      />\n\n      <img\n        className=\"nav__avatar\"\n        src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\n        alt=\"Profile Logo\"\n      />\n    </div>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from './Banner';\nimport Nav from './Nav';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Nav />\n     <Banner />\n     <Row title=\"NETFLIX ORIGINALS\" \n     fetchUrl={requests.fetchNetflixOriginals}\n     isLargeRow />\n\n     <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n     <Row title=\"Top Rates\" fetchUrl={requests.fetchTopRated} />\n     <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n     <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n     <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n     <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n     <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}